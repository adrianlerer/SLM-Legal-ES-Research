#!/usr/bin/env python3
"""
Ejecutor de Entrenamiento Privado - SLM-Legal-Spanish
===================================================

Script principal para ejecutar el entrenamiento con tu colecci√≥n privada
de documentos legales con m√°xima confidencialidad y seguridad.

CONFIDENCIAL - Uso Exclusivo
Desarrollado por: Ignacio Adri√°n Lerer

Caracter√≠sticas de Seguridad Implementadas:
‚úÖ Anonimizaci√≥n autom√°tica completa
‚úÖ Sin referencias a terceros o empresas
‚úÖ Procesamiento local √∫nicamente
‚úÖ Trazabilidad de experiencia sin revelaci√≥n de fuentes
‚úÖ Categorizaci√≥n por valor estrat√©gico propietario

INSTRUCCIONES DE USO:
1. Coloca tus documentos en una carpeta accesible
2. Ajusta la variable COLLECTION_PATH con la ruta correcta
3. Ejecuta: python execute_private_training.py
4. El sistema procesar√° autom√°ticamente con m√°xima confidencialidad
"""

import asyncio
import sys
import os
from pathlib import Path

# Agregar src al path para imports
sys.path.append(str(Path(__file__).parent / "src"))

from src.proprietary.private_training_plan import create_private_training_plan

# Importaci√≥n opcional para pipeline de entrenamiento
try:
    from src.proprietary.advanced_training_pipeline import ProprietaryTrainingPipeline
except ImportError:
    ProprietaryTrainingPipeline = None


async def main():
    """
    Funci√≥n principal para ejecutar entrenamiento privado.
    """
    
    print("üöÄ INICIANDO ENTRENAMIENTO PRIVADO SLM-Legal-Spanish")
    print("=" * 60)
    print("üìã Configuraci√≥n de Seguridad:")
    print("   ‚úÖ Anonimizaci√≥n autom√°tica: ACTIVADA")
    print("   ‚úÖ Protecci√≥n de confidencialidad: M√ÅXIMA")
    print("   ‚úÖ Procesamiento local: EXCLUSIVO")
    print("   ‚úÖ Sin referencias a terceros: GARANTIZADO")
    print()
    
    # ==========================================
    # CONFIGURACI√ìN - AJUSTAR SEG√öN TUS DATOS
    # ==========================================
    
    # IMPORTANTE: Cambiar esta ruta a donde tienes tus documentos
    COLLECTION_PATH = "/home/user/documents/private_collection"
    
    # Verificar si la ruta existe (para demo, creamos estructura de ejemplo)
    if not Path(COLLECTION_PATH).exists():
        print(f"‚ö†Ô∏è  La ruta {COLLECTION_PATH} no existe.")
        print(f"üìÅ Creando estructura de ejemplo para demostraci√≥n...")
        
        # Crear estructura de ejemplo
        example_path = "/home/user/SLM-Legal-Spanish/data/example_private_collection"
        Path(example_path).mkdir(parents=True, exist_ok=True)
        
        # Crear documentos de ejemplo (anonimizados)
        create_example_documents(example_path)
        
        COLLECTION_PATH = example_path
        print(f"‚úÖ Usando ruta de ejemplo: {COLLECTION_PATH}")
    
    print(f"üìÇ Procesando colecci√≥n en: {COLLECTION_PATH}")
    print()
    
    try:
        # ==========================================
        # FASE 1: CREAR PLAN DE ENTRENAMIENTO
        # ==========================================
        
        print("üîç FASE 1: An√°lisis y Planificaci√≥n Segura")
        print("-" * 40)
        
        plan = await create_private_training_plan(COLLECTION_PATH)
        
        # Mostrar resumen del plan
        print("‚úÖ Plan de entrenamiento creado exitosamente")
        print(f"üìä Estad√≠sticas del procesamiento:")
        
        stats = plan['document_analysis']['processing_statistics']
        print(f"   ‚Ä¢ Total de archivos: {stats['total_files']}")
        print(f"   ‚Ä¢ Procesados exitosamente: {stats['processed_successfully']}")
        print(f"   ‚Ä¢ Documentos anonimizados: {stats['anonymized']}")
        print(f"   ‚Ä¢ Tasa de anonimizaci√≥n: {plan['document_analysis']['anonymization_summary']['anonymization_rate']:.1%}")
        
        # Mostrar categorizaci√≥n estrat√©gica
        print(f"\\nüéØ Categorizaci√≥n por Valor Estrat√©gico:")
        for category, data in plan['document_analysis']['strategic_categorization'].items():
            if data['total_documents'] > 0:
                print(f"   ‚Ä¢ {category}: {data['total_documents']} documentos")
                print(f"     - Valor estrat√©gico: {data['strategic_value']}")
                print(f"     - Peso de entrenamiento: {data['training_weight']:.1f}x")
                print(f"     - Calidad promedio: {data['avg_quality_score']:.2f}")
        
        print(f"\\nüîí Medidas de Seguridad Aplicadas:")
        security = plan['security_measures']
        print(f"   ‚úÖ Anonimizaci√≥n: {security['data_protection']['anonymization']}")
        print(f"   ‚úÖ Referencias empresas: {security['data_protection']['company_references']}")
        print(f"   ‚úÖ Procesamiento local: {security['processing_security']['local_only']}")
        print(f"   ‚úÖ Protecci√≥n IP: {security['model_protection']['ip_protection']}")
        
        print()
        
        # ==========================================
        # FASE 2: CONFIGURAR PIPELINE PROPIETARIO
        # ==========================================
        
        print("‚öôÔ∏è  FASE 2: Configuraci√≥n del Pipeline Propietario")
        print("-" * 40)
        
        # Inicializar pipeline con configuraci√≥n del plan
        training_config = plan['training_configuration']
        
        print("‚úÖ Pipeline propietario configurado:")
        print(f"   ‚Ä¢ Arquitectura: {training_config['model_architecture']['base_model']}")
        print(f"   ‚Ä¢ Metodolog√≠a: {training_config['training_methodology']['approach']}")
        print(f"   ‚Ä¢ Fases de entrenamiento: {len(training_config['training_methodology']['phases'])}")
        
        # Mostrar capas especializadas
        print(f"\\nüß† Capas Especializadas:")
        for layer_name, layer_config in training_config['model_architecture']['specialized_layers'].items():
            print(f"   ‚Ä¢ {layer_name}:")
            print(f"     - Neuronas: {layer_config['neurons']}")
            print(f"     - Descripci√≥n: {layer_config['description']}")
        
        print()
        
        # ==========================================
        # FASE 3: ROADMAP DE IMPLEMENTACI√ìN  
        # ==========================================
        
        print("üó∫Ô∏è  FASE 3: Roadmap de Implementaci√≥n")
        print("-" * 40)
        
        total_days = sum(phase['duration_days'] for phase in plan['implementation_roadmap'])
        print(f"üìÖ Duraci√≥n total estimada: {total_days} d√≠as")
        print()
        
        for i, phase in enumerate(plan['implementation_roadmap'], 1):
            print(f"üî¢ Fase {i}: {phase['phase']} ({phase['duration_days']} d√≠as)")
            print(f"   Criterio de √©xito: {phase['success_criteria']}")
            for task in phase['tasks']:
                print(f"   ‚úì {task}")
            print()
        
        # ==========================================
        # FASE 4: M√âTRICAS DE EVALUACI√ìN
        # ==========================================
        
        print("üìà FASE 4: Framework de Evaluaci√≥n Profesional")
        print("-" * 40)
        
        eval_framework = plan['evaluation_framework']
        
        # M√©tricas de competencia profesional
        print("üéì M√©tricas de Competencia Profesional:")
        for metric_name, metric_config in eval_framework['professional_competency_metrics'].items():
            print(f"   ‚Ä¢ {metric_name}: {metric_config['test_cases']} casos de prueba")
            print(f"     - {metric_config['description']}")
        
        # Validaci√≥n jurisdiccional
        jurisdictional = eval_framework['jurisdictional_expertise_validation']
        multi_j = jurisdictional['multi_jurisdictional_consistency']
        print(f"\\nüåç Validaci√≥n Multijurisdiccional:")
        print(f"   ‚Ä¢ Jurisdicciones: {', '.join(multi_j['jurisdictions_tested'])}")
        print(f"   ‚Ä¢ Escenarios de prueba: {multi_j['test_scenarios']}")
        
        # Verificaci√≥n de confidencialidad
        print(f"\\nüîê Verificaci√≥n de Confidencialidad:")
        conf_metrics = eval_framework['confidentiality_verification']['anonymization_effectiveness']['metrics']
        for metric in conf_metrics:
            print(f"   ‚úì {metric}")
        
        print()
        print("‚úÖ PLAN DE ENTRENAMIENTO PRIVADO COMPLETADO")
        print("=" * 60)
        print("üìã Siguiente paso: Revisar el archivo generado en:")
        print(f"   üìÑ /home/user/SLM-Legal-Spanish/data/private_corpus/processed/private_training_plan.json")
        print()
        print("‚öñÔ∏è  CONFIDENCIALIDAD GARANTIZADA")
        print("   ‚Ä¢ Sin referencias a empresas terceras")
        print("   ‚Ä¢ Anonimizaci√≥n autom√°tica aplicada") 
        print("   ‚Ä¢ Procesamiento 100% local")
        print("   ‚Ä¢ Experiencia profesional preservada de forma gen√©rica")
        
    except Exception as e:
        print(f"‚ùå Error durante el entrenamiento: {e}")
        import traceback
        traceback.print_exc()


def create_example_documents(example_path: str):
    """
    Crea documentos de ejemplo para demostrar el procesamiento
    (completamente anonimizados y gen√©ricos).
    """
    
    # Crear subdirectorios
    subdirs = [
        "actas_directorio",
        "dictamenes_legales", 
        "compliance_reports",
        "contratos",
        "normativas"
    ]
    
    for subdir in subdirs:
        Path(example_path, subdir).mkdir(parents=True, exist_ok=True)
    
    # Documento 1: Acta de directorio (anonimizada)
    acta_content = '''
    ACTA DE REUNI√ìN DE DIRECTORIO N¬∞ XXX
    
    Fecha: [FECHA_ANONIMIZADA]
    Lugar: Sede social
    
    ASISTENTES:
    - [DIRECTOR_1]: Director Independiente  
    - [DIRECTOR_2]: Director Titular
    - [DIRECTOR_3]: Director Suplente
    
    ORDEN DEL D√çA:
    1. An√°lisis de riesgos operacionales
    2. Evaluaci√≥n de framework de compliance
    3. Aprobaci√≥n de pol√≠ticas de gobierno corporativo
    
    RESOLUCIONES:
    
    Se resuelve aprobar el framework de gesti√≥n de riesgos propuesto, 
    considerando las mejores pr√°cticas internacionales y el cumplimiento
    de la normativa vigente en materia de gobierno corporativo.
    
    El marco incluye procedimientos de identificaci√≥n, evaluaci√≥n y 
    mitigaci√≥n de riesgos, con reportes trimestrales al directorio.
    
    [FIRMA_ANONIMIZADA]
    Director Independiente
    '''
    
    with open(Path(example_path, "actas_directorio", "acta_ejemplo_001.txt"), 'w', encoding='utf-8') as f:
        f.write(acta_content)
    
    # Documento 2: Dictamen legal (anonimizado)
    dictamen_content = '''
    DICTAMEN LEGAL N¬∞ XXX
    
    A: [CLIENTE_ANONIMIZADO]
    De: [ABOGADO_ANONIMIZADO]
    Fecha: [FECHA_ANONIMIZADA]
    
    Ref: An√°lisis de cumplimiento normativo - Ley de Mercado de Capitales
    
    CONSULTA:
    Se solicita an√°lisis sobre la aplicabilidad de las disposiciones
    de la Ley 26.831 respecto a las obligaciones de informaci√≥n
    de sociedades que hacen oferta p√∫blica de sus acciones.
    
    AN√ÅLISIS LEGAL:
    
    1. MARCO NORMATIVO APLICABLE
    La Ley 26.831 establece el r√©gimen del mercado de capitales,
    siendo de aplicaci√≥n a todas las personas humanas y jur√≠dicas
    que participen en la oferta p√∫blica.
    
    2. OBLIGACIONES DE INFORMACI√ìN
    El art. 63 establece la obligaci√≥n de presentar informaci√≥n
    peri√≥dica seg√∫n los plazos establecidos por la CNV.
    
    3. RECOMENDACIONES
    Se recomienda implementar un cronograma de cumplimiento
    que contemple todas las fechas de presentaci√≥n obligatoria.
    
    CONCLUSI√ìN:
    La sociedad debe cumplir estrictamente con las obligaciones
    informativas establecidas en la normativa vigente.
    
    [FIRMA_ANONIMIZADA]
    Abogado Responsable
    '''
    
    with open(Path(example_path, "dictamenes_legales", "dictamen_ejemplo_001.txt"), 'w', encoding='utf-8') as f:
        f.write(dictamen_content)
    
    # Documento 3: Reporte de compliance (anonimizado)
    compliance_content = '''
    REPORTE DE COMPLIANCE - TRIMESTRE [PERIODO_ANONIMIZADO]
    
    RESUMEN EJECUTIVO
    
    El presente reporte analiza el estado de cumplimiento de las
    pol√≠ticas internas y normativas externas durante el per√≠odo
    bajo an√°lisis.
    
    √ÅREAS EVALUADAS:
    
    1. GOBIERNO CORPORATIVO
    - Funcionamiento del directorio: SATISFACTORIO
    - Comit√©s especializados: OPERATIVO
    - Pol√≠ticas de conflictos de inter√©s: ACTUALIZADA
    
    2. GESTI√ìN DE RIESGOS
    - Matriz de riesgos: REVISADA Y ACTUALIZADA
    - Controles internos: FUNCIONANDO
    - Reportes de incidentes: 0 eventos materiales
    
    3. CUMPLIMIENTO REGULATORIO
    - Normativa CNV: CUMPLIMIENTO TOTAL
    - Reportes obligatorios: PRESENTADOS EN T√âRMINO
    - Actualizaciones normativas: INCORPORADAS
    
    RECOMENDACIONES:
    1. Fortalecer capacitaci√≥n en nuevas normativas
    2. Actualizar procedimientos de debida diligencia
    3. Implementar m√©tricas adicionales de monitoreo
    
    PR√ìXIMOS PASOS:
    - Revisi√≥n semestral de pol√≠ticas
    - Actualizaci√≥n de matriz de riesgos
    - Capacitaci√≥n especializada del personal
    
    [ELABORADO_POR_ANONIMIZADO]
    Responsable de Compliance
    '''
    
    with open(Path(example_path, "compliance_reports", "compliance_ejemplo_001.txt"), 'w', encoding='utf-8') as f:
        f.write(compliance_content)
    
    print(f"‚úÖ Documentos de ejemplo creados en {example_path}")


if __name__ == "__main__":
    """
    Punto de entrada principal.
    """
    asyncio.run(main())